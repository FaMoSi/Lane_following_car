"""
http://incompleteideas.net/sutton/MountainCar/MountainCar1.cp
permalink: https://perma.cc/6Z2N-PFWC
"""

import math

import numpy as np
import pandas as pd
import gym
from gym import spaces
from gym.utils import seeding

class MountainCarEnv(gym.Env):
    metadata = {
        'render.modes': ['human', 'rgb_array'],
        'video.frames_per_second': 30
    }

    def __init__(self, goal_velocity = 0):
        self.min_position = 0.3
        self.max_position = 3.
        self.max_speed = 0.07
        self.goal_position = [3.7, 1.]
        self.goal_velocity = goal_velocity
        self.rotation = 0
        self.line = []
        
        self.force=0.001
        self.gravity=0.0025

        self.low = np.array([self.min_position, -self.max_speed], dtype=np.float32)
        self.high = np.array([self.max_position, self.max_speed], dtype=np.float32)

        self.viewer = None

        self.action_space = spaces.Discrete(7)
        self.observation_space = spaces.Box(self.low, self.high, dtype=np.float32)

        self.seed()

    def seed(self, seed=None):
        self.np_random, seed = seeding.np_random(seed)
        return [seed]

    def step(self, action):
        assert self.action_space.contains(action), "%r (%s) invalid" % (action, type(action))

        if action == 0:
            action = [1., 1.]
        elif action == 1:
            action = [0.7, 1.]
        elif action == 2:
            action = [1., 0.7]
        # elif action == 3:
        #     action = [0.75, 1.]
        # elif action == 4:
        #     action = [1., 0.75]
        # elif action == 5:
        #     action = [0.65, 1.]
        # elif action == 6:
        #     action = [1., 0.65]

        position, velocity = self.state

        rotation = (action[1] - action[0])
        self.rotation += rotation
        distance = np.mean(action) * 0.07

        position_x = position[0] + np.cos(self.rotation) * distance
        position_y = position[1] + np.sin(self.rotation) * distance
        position = [position_x, position_y]
        position = np.array(position)
        
        velocity = np.array([action[0], action[1]])

        done = bool(np.allclose(position, self.goal_position, 0.1))
        reward = -1.0

        self.state = (position, velocity)
        return np.array(self.state), reward, done, {}

    def reset(self):
        self.state = np.array([[self.np_random.uniform(low=0.0, high=0.2), self.np_random.uniform(low=0.7, high=1.2)], np.zeros(2)])
        return np.array(self.state)

    def _height(self, xs):
        return np.sin(3 * xs)*.45+.55

    def save_line(self):
        ep = pd.DataFrame(self.line, columns=["position_x", "position_y", "shift_x", "shift_y"])
        ep.to_pickle("./episodes_keyboard/episode_" + str(np.round(ep["position_x"][0], decimals=3)) + "_" +
                     str(ep["position_x"].shape[0]) + ".pkl")

    def render(self, mode='human'):
        screen_width = 600
        screen_height = 400
        world_width = self.max_position - self.min_position
        scale = screen_width/world_width
        carwidth=5
        carheight=5

        if self.viewer is None:
            from gym.envs.classic_control import rendering
            self.viewer = rendering.Viewer(screen_width, screen_height)
            # xs = np.linspace(self.min_position, self.max_position, 41)
            # ys = self._height(xs)
            xs = np.array([0.08078343769427906, 0.14028343769427906, 0.21028343769427907, 0.2802834376942791, 0.3502834376942791, 0.4202834376942791, 0.4902834376942791, 0.5602834376942791, 0.6302834376942792, 0.7002834376942793, 0.7702834376942793, 0.8402834376942794, 0.9102834376942794, 0.967125958797253, 1.016233427884379, 1.0532192209964835, 1.0747795073878454, 1.0789883708870738, 1.0654698462528351, 1.0696787097520635, 1.0912389961434255, 1.12822478925553, 1.1773322583426558, 1.2341747794456293, 1.2936747794456294, 1.3636747794456294, 1.4336747794456295, 1.5036747794456296, 1.5736747794456296, 1.6436747794456297, 1.7136747794456297, 1.7836747794456298, 1.8536747794456299, 1.92367477944563, 1.99367477944563, 2.06367477944563, 2.13367477944563, 2.1905173005486036, 2.2396247696357294, 2.276610562747834, 2.298170849139196, 2.3023797126384244, 2.288861188004186, 2.27295704137567, 2.257052894747154, 2.241148748118638, 2.225244601490122, 2.2093404548616062, 2.1934363082330903, 2.1775321616045744, 2.1616280149760585, 2.1457238683475426, 2.1298197217190267, 2.1139155750905108, 2.0838772318668193, 2.040002305792115, 1.9862100133421, 1.9273054597943733, 1.868550413484796, 1.7994268295911753, 1.7303032456975547, 1.661179661803934, 1.5920560779103134, 1.5229324940166928, 1.4538089101230722, 1.3846853262294516, 1.315561742335831, 1.2464381584422104, 1.1773145745485898, 1.1184100210008632, 1.064617728550848])
            ys = np.array([0.8791929653015608, 0.8791929653015608, 0.8791929653015608, 0.8791929653015608, 0.8791929653015608, 0.8791929653015608, 0.8791929653015608, 0.8791929653015608, 0.8791929653015608, 0.8791929653015608, 0.8791929653015608, 0.8791929653015608, 0.8791929653015608, 0.8967764175979105, 0.9303726447649151, 0.9769805958877503, 1.0324369215028002, 1.0917878732057416, 1.149731807242994, 1.2090827589459354, 1.2645390845609854, 1.3111470356838206, 1.3447432628508253, 1.362326715147175, 1.362326715147175, 1.362326715147175, 1.362326715147175, 1.362326715147175, 1.362326715147175, 1.362326715147175, 1.362326715147175, 1.362326715147175, 1.362326715147175, 1.362326715147175, 1.362326715147175, 1.362326715147175, 1.362326715147175, 1.3447432628508253, 1.3111470356838208, 1.2645390845609856, 1.2090827589459356, 1.1497318072429943, 1.0917878732057418, 1.023618539044268, 0.9554492048827944, 0.8872798707213208, 0.8191105365598471, 0.7509412023983735, 0.6827718682368998, 0.6146025340754262, 0.5464331999139526, 0.4782638657524789, 0.4100945315910053, 0.34192519742953165, 0.2905642401139237, 0.2503741808711302, 0.22494507799721736, 0.21654843751765526, 0.22593430631917855, 0.2369765049092059, 0.24801870349923327, 0.25906090208926064, 0.270103100679288, 0.28114529926931536, 0.2921874978593427, 0.3032296964493701, 0.31427189503939745, 0.3253140936294248, 0.3363562922194522, 0.32795965173989006, 0.3025305488659772])
            shift_x = [(j - i) for i, j in zip(xs, xs[1:])]
            shift_y = [(j - i) for i, j in zip(ys, ys[1:])]
            self.line = list(zip(xs, ys, shift_x, shift_y))
            self.save_line()
            xys = list(zip(xs*scale, ys*scale))
            self.track = rendering.make_polyline(xys)
            self.track.set_linewidth(2.5)
            self.viewer.add_geom(self.track)

            clearance = -5

            l,r,t,b = -carwidth/2, carwidth/2, carheight, 0
            car = rendering.FilledPolygon([(l,b), (l,t), (r,t), (r,b)])
            car.add_attr(rendering.Transform(translation=(0, clearance)))
            self.cartrans = rendering.Transform()
            car.add_attr(self.cartrans)
            self.viewer.add_geom(car)

            # flagx = self.goal_position[0] * scale
            # flagy1 = self.goal_position[1] * scale
            # flagy2 = flagy1 + 20
            # flagpole = rendering.Line((flagx, flagy1), (flagx, flagy2))
            # self.viewer.add_geom(flagpole)
            # flag = rendering.FilledPolygon([(flagx, flagy2), (flagx, flagy2-10), (flagx+25, flagy2-5)])
            # flag.set_color(.8,.8,0)
            # self.viewer.add_geom(flag)

        pos = self.state[0]

        self.cartrans.set_translation(pos[0]*scale, pos[1]*scale)
        self.cartrans.set_rotation(self.rotation)

        return self.viewer.render(return_rgb_array = mode=='rgb_array')
    
    def get_keys_to_action(self):
        return {():1,(276,):0,(275,):2,(275,276):1} #control with left and right arrow keys 
    
    def close(self):
        if self.viewer:
            self.viewer.close()
            self.viewer = None
